#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>

using namespace std;
using namespace cv;

static void ContrastAndBright(int, void *);
void   ShowHelpText();

int g_nContrastValue; //ï¿½Ô±È¶ï¿½Öµ
int g_nBrightValue;  //ï¿½ï¿½ï¿½ï¿½Öµ
Mat g_srcImage,g_dstImage;
int main(   )
{
	ShowHelpText();
	g_srcImage = imread( "../27_ChangeContrastAndBright.jpg");
	if( !g_srcImage.data ) { printf("ï¿½ï¿½È¡g_srcImageÍ¼Æ¬ï¿½ï¿½ï¿½ï¿½~ï¿½ï¿½ \n"); return false; }
	g_dstImage = Mat::zeros( g_srcImage.size(), g_srcImage.type() );

	//ï¿½è¶¨ï¿½Ô±È¶Èºï¿½ï¿½ï¿½ï¿½ÈµÄ³ï¿½Öµ
	g_nContrastValue=80;
	g_nBrightValue=80;

	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	namedWindow("1", 1);

	//ï¿½ï¿½ï¿½ï¿½ï¿½ì¼£ï¿½ï¿½
	createTrackbar("ï¿½Ô±È¶È£ï¿½", "ï¿½ï¿½Ð§ï¿½ï¿½Í¼ï¿½ï¿½ï¿½Ú¡ï¿½",&g_nContrastValue, 300,ContrastAndBright );
	createTrackbar("ï¿½ï¿½   ï¿½È£ï¿½", "ï¿½ï¿½Ð§ï¿½ï¿½Í¼ï¿½ï¿½ï¿½Ú¡ï¿½",&g_nBrightValue, 200,ContrastAndBright );

	//ï¿½ï¿½ï¿½Ã»Øµï¿½ï¿½ï¿½ï¿½ï¿½
	ContrastAndBright(g_nContrastValue,0);
	ContrastAndBright(g_nBrightValue,0);

	//ï¿½ï¿½ï¿½Ò»Ð©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï?
	cout<<endl<<"\tï¿½ï¿½ï¿½Ð³É¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Û²ï¿½Í¼ï¿½ï¿½Ð§ï¿½ï¿½\n\n"
		<<"\tï¿½ï¿½ï¿½Â¡ï¿½qï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ë³ï¿½\n";

	//ï¿½ï¿½ï¿½Â¡ï¿½qï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ë³ï¿½
	while(char(waitKey(1)) != 'q') {}
	return 0;
}




//-----------------------------------ï¿½ï¿½ShowHelpText( )ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½----------------------------------
//		 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»Ð©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï?
//----------------------------------------------------------------------------------------------
void ShowHelpText()
{
	//ï¿½ï¿½ï¿½ï¿½ï¿½Ó­ï¿½ï¿½Ï¢ï¿½ï¿½OpenCVï¿½æ±¾
	printf("\n\n\t\t\tï¿½Ç³ï¿½ï¿½ï¿½Ð»ï¿½ï¿½ï¿½ï¿½OpenCV3ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å¡ï¿½Ò»ï¿½é£¡\n");
	printf("\n\n\t\t\tï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½OpenCV3ï¿½ï¿½Äµï¿?27ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½\n");
	printf("\n\n\t\t\t   ï¿½ï¿½Ç°Ê¹ï¿½Ãµï¿½OpenCVï¿½æ±¾Îªï¿½ï¿½" CV_VERSION );
	printf("\n\n  ----------------------------------------------------------------------------\n");
}


//-----------------------------ï¿½ï¿½ContrastAndBright( )ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½------------------------------------
//	ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä±ï¿½Í¼ï¿½ï¿½Ô±È¶Èºï¿½ï¿½ï¿½ï¿½ï¿½Öµï¿½Ä»Øµï¿½ï¿½ï¿½ï¿½ï¿?
//-----------------------------------------------------------------------------------------------
static void ContrastAndBright(int, void *)
{

	// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	namedWindow("0", 1);

	// ï¿½ï¿½ï¿½ï¿½forÑ­ï¿½ï¿½ï¿½ï¿½Ö´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ g_dstImage(i,j) = a*g_srcImage(i,j) + b
	for( int y = 0; y < g_srcImage.rows; y++ )
	{
		for( int x = 0; x < g_srcImage.cols; x++ )
		{
			for( int c = 0; c < 3; c++ )
			{
				g_dstImage.at<Vec3b>(y,x)[c] = saturate_cast<uchar>( (g_nContrastValue*0.01)*( g_srcImage.at<Vec3b>(y,x)[c] ) + g_nBrightValue );
			}
		}
	}

	// ï¿½ï¿½Ê¾Í¼ï¿½ï¿½
	imshow("g_srcImage", g_srcImage);
	imshow("g_dstImage", g_dstImage);
}


